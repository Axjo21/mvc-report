{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block main %}
    <h1>Report</h1>
    <h2>Använd länkarna för snabb navigering</h2>
    <nav class="nav-report">
        <li><a href="#kmom01">Kmom01</a></li>
        <li><a href="#kmom02">Kmom02</a></li>
        <li><a href="#kmom03">Kmom03</a></li>
        <li><a href="#kmom04">Kmom04</a></li>
        <li><a href="#kmom05">Kmom05</a></li>
        <li><a href="#kmom06">Kmom06</a></li>
        <li><a href="#kmom07">Kmom07</a></li>
        <li><a href="#kmom07/10">Kmom07/10</a></li>
    </nav>
    <h2><a id="kmom01">Kmom01</a></h2>
    <h3> --Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</h3>
    <p>Min enda förkunskap av objektorientering är från kursen "OO-Python" som jag läste tidigare i våras.
    Där jag lärde mig några av de mer klassiska formerna av Objektorienterad
    programmering. I oopy gick vi igenom saker som klasser, arv, metoder, privata/publika attribut med mera.
    Som jag förstår det så kommer MVC att fokusera på en liknande form av objektorienterad programmering. </p>

    <h3> --Berätta kort om PHPs modell för klasser och objekt.
    Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</h3>
    <p>Man behöver veta att ett objekt har properties(medlemsvariabler) och methods(metoder, (eller funktioner) som är kopplade till objekt).
        Medlemsvariablerna är allt som ett objekt behöver lagra. Metoderna är allt som objektet behöver kunna utföra.
        Man behöver vara medveten om medlemsvariablernas synlighet och på vilken nivå åtkomsten till dem är satt. Är en medlem privat så kan man inte 
        se eller ändra den utanför klassen, då behöver man skapa metoder som hanterar den funktionaliteten. Så kallade setters och getters. 
    </p>

    <h3> --Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</h3>
    <p>Det påminner mycket om hur det var att ge sig in i Design-kursens första kursmoment. Det är väldigt många filer att hålla reda på och det är mycket man inte skapat själv.
    Att komma rätt in bland filer man inte själv skapat är utmanande, och man får gissa sig fram till hur mycket av hur det hela hänger ihop.</p>

    <h3> --Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla?
    Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</h3>
    <p>Det mest värdefulla jag tog med mig från artikeln var huvudsakligen självaste artikelns syfte, att det är lätt att hitta felaktig information 
    på internet om best practices och att det är bra att lära sig rätt från början. På så sätt var det en intressant artikel, men det är inte en artikel
    som är väl lämpad för att lära ut PHP från grunden, då de kod-exempel de tog upp var något avancerade.
    Jag känner att jag inte har speciellt bra koll på Dependencies och tror att det vore bra om jag lärde mig lite mer om det. 
    Dependencies är kanske inte ett super spännande område men att lära sig hantera dem och göra de mer flexibla genom Dependency Injections
    låter roligt.
    </p>

    <h3> --Vilken är din TIL för detta kmom?</h3>
    <p>Jag lärde mig att PHP har en inbyggd web server som man kör genom "php -S ...".

    <h2><a id="kmom02">Kmom02</a></h2>

    <h3> --Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</h3>
    <p>
        Arv - Arv används dels för att återanvända kod och hålla klasser som har mycket gemensamt fri från boilerplate kod.
        En klass som ärver från en annan klass kallas för "subclass" och den andra klassen kallas för "basklass". Subklassen ärver samtliga metoder
        och medlemsvariabler från basklassen. Subklasserna kan lägga till funktionalitet eller ändra från den ärvda funktionaliteten utan att ändra
        på basklassen.<br>
        Komposition - Komposition är en annan form av relation mellan klasser. I komposition säger man att en klass "has-a" annan klass. Medans i arv
        säger man att en klass "is-a" annan klass. Det vill säga att i komposition så består en klass av andra klasser och de klasserna som finns med i
        "huvudklassen" kan inte existera utanför instansen av just den klassen. Till skillnad från aggregation, som är en annan typ av relation, som har mycket
        gemensamt med komposition, fast där klasserna inte är lika beroende på varandra.<br>
        Interface - Ett interface är en beskrivning av hur en klass bör implementeras, vilka metoder den bör ha med osv. Kan liknas med "abstract-klass".<br>
        Trait - Ett trait är en typ av metod som en klass kan extenda och använda sig av. Traits kan inte instansieras själva. 
    </p>
    <h3> --Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</h3>
    <p>
        Jag började med att studera övningen med "pig" spelet och testade själv på att skapa routes och anpassa pig-rutterna för att passa in på denna uppgiften. 
        Sedan funderade jag över hur jag skulle strukturera mina klasser och efter det så satte jag igång. Jag märkte snabbt att mycket av övningens krav kunde 
        uppfyllas genom att endast implementera DeckOfCards klassen och det var det jag gjorde till stor del. Mot slutet, när kraven redan var uppfyllda så fokuserade jag
        på att flytta över metoder och omstrukturera min kod för att implementera arv och komposition av de andra klasserna. 
        När det kommer till förbättringspotential så hade jag valt att skapa en komposition mellan DeckOfCards och Cards och jag hade även sparat kortleken sorterad på ett annat sätt. 
        Allt som allt är jag nöjd med min lösning av uppgiften och jag tycker att jag gjorde ett bra arbete, med tanke på att det var en stor uppgift och jag lade ner mycket tid på den. 
    </p>
    <h3> --Vilka är dina refelktioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</h3>
    <p>
        Jag tycker att det är väldigt smidigt att jobba i Symfony och att tillämpa en MVC-struktur på koden. Nackdelen med Symfony, samt liknande moduler är att
        man inte skriver koden själv, så det kan vara svårt att förstå vad den gör, hur den hänger ihop och varför det fungerar som det gör. 
    </p>
    <h3> --Vilken är din TIL för detta kmom?</h3>
    <p>Jag har lärt mig mycket om hur Controllers fungerar och jag har även blivit bättre på att använda Git, då jag fokuserade på att skapa många commits detta kmom.</p>


    <h2><a id="kmom03">Kmom03</a></h2>
    <h3> 
        -- Berätta hur det kändes att modellera ett kortspel med flödesdiagram och pseudokod.
        Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?
    </h3>
    <p>
        Att skapa flödesdiagram och pseudokod hjälpte mig väldigt mycket.
        Jag brukar anteckna mina tankar på papper men genom att ta hjälp av tekniker som dessa fick jag en mer strukturerad förståelse över problemet.
        Speciellt pseudokod är något som jag kommer dra nytta av i framtiden.
    </p>
    <p>
        Fördelen är att man från början får en struktur på arbetet och det blir naturligt att man prioriterar de viktigaste först, dvs 'KISS'. 
        Nackdelen är att det kan vara svårt att veta hur man ska gå till väga innan man börjat koda.
        Då är det kanske bättre att först skapa en väldigt simpel lösning som man sedan kan bygga vidare på efter att man kommit igång.
    </p>


    <h3>
        -- Berätta om din implementation från uppgiften.
        Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden,
        dina klasser och applikationen som helhet?
    </h3>
    <p>
        Jag är nöjd med min lösning.
        Jag funderade på att göra kontrollerna ännu "tunnare" och istället lägga mer kod i modellerna
        men det beslöt jag mig för att inte göra eftersom det inte handlade om endast ett fåtal rader kod och vore onödigt ansträngande.
        Dessa funderingar hade jag mot slutet av uppgiften då jag reflekterade över hur jag kunde förenkla kontrollerna.
        Jag hade löst det genom att skapa en Game klass som hanterade spelets flöde genom att anropa andra klasser och returnera färdig formatterad data.
        På så vis hade jag även förminskat if och else satser i vyerna, men som sagt,
        det hade blivit för komplicerat och vore enligt mig inte värt det endast för att bli av med ett fåtal session anrop i kontrollerna.
    </p>
    <p>
        I övrigt så byggde jag vidare på mina tidigare klasser och skapade även en ny klass, BankHand som bygger på CardHand klassen.
        BankHand har i uppgift att dra kort åt banken. Jag höll mig till grundkraven och fokuserade på att de skulle bli ordentligt gjorda,
        eftersom det var ett tag sedan jag gjorde kmom02.
    </p>


    <h3> --Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?</h3>
    <p>
        Jag börjar känna mig mer och mer bekväm med Symfony men har ännu inte greppat det helt och hållet.
        Jag tycker att det funkar bra såhär långt för enklare applikationer,
        men det återstår att se hur det kommer att funka när vi börjar skapa mer avancerade program, då man är van vid JavaScript.
        Jag tjuvkikade lite på kommande kmom och jag tror att Symfony lämpar sig bra till de användningsområdena och att jag kommer att trivas med det.
    </p>


    <h3> --Vilken är din TIL för detta kmom?</h3>
    <p>
        Speciellt kul detta kursmomentet var att lära sig pseudokod och flödesdiagram.
        Jag känner även att jag har en bättre förståelse för designmönstret MVC, vilket jag inte förstod så väl tidigare.
        När jag publicerade till studentservern så stötte jag på problem. Detta ledde till att jag fick dyka ner i composer, dependency versioner,
        själva koden i vendor/symfony och vendor/doctrine-bundle med mera. Det var lite frustrerande men jag fick också lära mig mycket av det.
    </p>

    <h2><a id="kmom04">Kmom04</a></h2>
    <h3>-- Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt.</h3>
    <p>Jag tycker om att skriva tester för min kod, enhetstester specifikt. </p>
    <p>
        PHPUnit var relativt lätt att använda sålänge man tittade i dokumentationen,
        jag refererade ofta till delen kring assertions när jag skrev mina tester.
        Jag tycker om att man kunde få se statistik kring ens kodtäckning med hjälp av xdebug,
        men jag hade önskat att man också såg någon liknande rapport i terminalen.
    </p>


    <h3>-- Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?</h3>
    <p>
        Jag lyckades nå 100% kodtäckning på alla mina modell klasser. Man kan dock konstatera att det inte betyder att min test suite inte kan förbättras. 
        Det kan vara lätt att se på 100% kodtäckning och känna sig nöjd, men vad är det igentligen som testas?
    </p>
    <p>
        100% kodtäckning betyder ju att testerna har kört varje rad kod iallafall en gång,
        men det säger en ingenting om att testerna faktiskt testar den tänkta funktionaliteten av koden.
        För att förtydliga; efter att man anropat den publika metoden som man vill testa i sitt enhetstest, så räknas det in i kodtäckningen.
        Vad man sedan använder för assert är alltså inte relevant utifrån en kodtäcknings synvinkel, vilket något underminerar själva meningen med testet. 
    </p>

    <h3>
        -- Upplever du din egen kod som “testbar kod”
        eller finns det delar i koden som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?
    </h3>
    <p>
        Jag tycker att min kod är testbar. En riskfaktor med min kod är att en del metoder anropar andra metoder,
        tillexempel så anropas "shuffle" metoden när man kör "drawCard" metoden i DeckOfCards.
        Skulle "shuffle" metoden orsaka ett fel så kan det leda till att enhetstestet för "drawCard" också misslyckas.
        Jag motverkade detta genom att testa de metoder som var fullständigt självständiga först.
    </p>

    <h3>-- Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, om så berätta lite hur du tänkte.</h3>
    <p>Nej, jag skrev inte om min kod. </p>

    <h3>-- Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.</h3>
    <p>
        Jag tycker absolut att testbar kod är en del av "snygg och ren kod", men snygg kod handlar om mer än bara dess testbarhet.
        Skriver man testbar kod så är det ett tecken på att koden är lätt att förstå,
        kanske eftersom att den är välstrukturerad eller eftersom den är dokumenterad.
        Det är även ett tecken på att den inte är allt för komplicerad eller invecklad,
        något som man motverkar när man tar till designprinciper som MVC, vilket något som enligt mig också är en del av "snygg och ren kod".
    </p>

    <h3>-- Vilken är din TIL för detta kmom?</h3>
    <p>
        Att när man testar så handlar det inte endast om i vilken grad man uppnår hög kodtäckning eller ej,
        utan det handlar lika mycket om hur väl genomtänka de testerna man skriver är.
    </p>


    <h2><a id="kmom05">Kmom05</a></h2>
    <h3>Gick det bra att jobba igenom övningen med Symfony och Doctrine. Något särskilt du tänkte/reagerade på under övningen?</h3>
    <p>
        Att jobba med Doctrine ORM gick bra.
        Det var ett par olika kommandon man skulle använda sig av och jag kände inte att man fick tillräckligt med repetition för att verkligen lära sig dem,
        eftersom vi endast arbetade med en tabell. Den typen av repetition får vi kanske i projektet. 
        OMRs lösning för att arbeta på samma sätt oavsett vilken databas man använde sig av var intressant. 
    </p>



    <h3>Berätta om din applikation och hur du tänkte när du byggde upp den. Tänkte du något speciellt på användargränssnittet?</h3>
    <p>
        Denna gången så ville jag lägga mer fokus på designen, eftersom jag inte fokuserat på det så mycket för de tidigare kursmomenten.
        Jag funderade även på hur användarflödet kunde se ut och prioriterade det så att det flöt på bra.
        Jag lade även ner tid på att fixa till flashmessages för "success" och "error" samt att tilldela boken en default bild ifall man inte skickar med en själv.
    </p>


    <h3>Gick det bra att jobba med ORM i CRUD eller vad anser du om det, jämför gärna med andra sätt att jobba med databaser?</h3>
    <p>
        Jag tycker att ORM funkar bra, och kommer säkert att tycka ännu mer om det i slutet av kursen.
        Men just nu så föredrar jag att själv skriva SQL uttryck som tex procedures eftersom jag känner att det ger en mer kontroll.
        Det återstår att se vilket som jag föredrar, detta kursmomentet hade inte en tillräckligt stor databas för att man med säkerhet kan säga
        att man föredrar det ena eller det andra; men i nuläget så tycker jag att ORM är spännande. 
        Att arbeta på objektorienterat med en databas är fortfarande nytt för mig.
    </p>

    
    <h3>Vad är din uppfattning om ORM så här långt och relatera gärna till andra sätt att jobba med applikationskod mot databaser?</h3>
    <p>
        Det var lite speciellt att använda ORM eftersom det mestadels handlade om en
        initiell konfiguration och sedan så behövde man inte tänka så mycket mer på det.
        Jämfört med andra sätt att arbeta (tex Webtec kursen) där man behövde ha mer koll på hur SQL fungerade.
    </p>


    <h3>Vilken är din TIL för detta kmom?</h3>
    <p>
        Att jobba med bilder.
        Jag har inte laddat upp bilder genom formulär tidigare så det var intressant att testa på.
        Det var lite klurigt att få på plats så jag fick ta hjälp av PHPs dokumentation för att
        bland annat ta reda på hur man hämtar bilders MIME-type så att applikationen kan stödja olika bildformat. 
        Jag lärde mig även om type casting,
        vilket jag behövde eftersom mina inputs i formerna skickade en bredare variation av typer än vad jag accepterade i min metod.  
    </p>




    <h2><a id="kmom06">Kmom06</a></h2>


    <h3>
        Berätta hur det gick att integrera med Scrutinizer och vilken är din första känsla av verktyget och dess badges?
        Vilken kodtäckning och kodkvalitet fick du efter första bygget?
    </h3>

    <p>
        När jag körde min första Scrutinizer inspection stötte jag på ett antal problem.
        Min "my-tests" node fungerade som den skulle med rätt composer och php version, men "analysis" noden bråkade.
        Av någon anledning använde den fel composer version (1.x).. jag försökte specificera i scrutinizer.yml att den skulle
        köra en self-update till 2.x men det funkade inte, jag förstod inte varför "analysis" använde fel version medan det funkade i "my-tests".
        Jag tänkte att jag kanske hade en gammal composer eller php installation som låg och skräpade, eller att en cache någonstans strulade. 
    </p>
    <p>
        Efter många om och men så lyckades jag lösa det genom att berätta för analysis noden vilken PHP version jag ville använda,
        vilket löste problemet med fel composer version. Hur saker och ting hänger ihop på en sådan nivå känns ganska abstrakt för mig,
        men man lär sig mycket av det. 
    </p>
    <p>
        Coverage var inte med per automatik, men det var inga större svårigheter att lösa den biten.
    </p>
    <p>
        Jag tycker personligen att Scrutinizer gav en mycket bättre insikt på ens kodkvalitet än vad Phpmetrics gjorde.
        Speciellt när det gäller coverage.
    </p>
    <p>
        Min coverage var 20% vid min första inspection. Efter detta kmom ligger den på 23%.
        Modellerna har 100% coverage men mina Controllers har inga tester. Jag är osäker på vad kravet är vad gäller coverage för Controllers,
        de kan ju vara svåra att enhetstesta.</p>
    <p>
        Scrutinizers badges var bra, de gör det som dem ska göra, fast inte mycket mer. </p>


    <h3>
        Hur är din egen syn på kodkvalitet, berätta lite om den?
        Tror du man kan man påvisa kodkvalitet i någon viss mån med badges eller vad tror du?
    </h3>
    <p>
        Jag tror att kodkvalitet är något som inte altid går att komprimera ner till mätvärden.
        Jag märkte att när jag skapade min metod för att lägga till en bild till en Book så blev metodens
        mätvärden för bland annat komplexitet mycket högre än andra, samtidigt som jag var nöjd med metodens funktionalitet och struktur.
        När man arbetar med kodkvalitet så kan man ta hjälp av mätvärdena, men man får komma ihåg att de är till för att hjälpa en,
        inte att diktera vad eller hur man skriver sin kod. </p>
    <p>
        Absolut så kan badges skapa en bild över kodkvalitet,
        men de ger inte en helhetsbild. De kan vara bra för att snabbt och lätt se ifall något gick fel med ens kod efter man pushat till ett remote repo,
        men för att förstå kodens kvalitet så måste man analysera den på en djupare nivå.
    </p>


    <h3>Vilken är din TIL för detta kmom?</h3>
    <p>
        Jag lärde mig mycket om kodkvalitet, speciellt kring komplexitet.
        Jag lärde mig även kring att configurera Scrutinizer, vilket jag hade problem med,
        men jag vet inte hur mycket den kunskapen kan översättas till andra åtaganden. 
        Det jag främst kommer ta med mig efter detta kursmomentet är en nyfunnen insikt i att den koden man skriver antingen kan vara bra eller dålig,
        att ha kodkvalitet i åtanke samtidigt som man utvecklar kan nog vara en bra ide.
    </p>



    <h2><a id="kmom07/10">Kmom07/10</a></h2>
    <h3>Hur jag löste krav 1-3</h3>
    <p>
        För att få till min nya design så skapade jag en ny css fil i /styles där jag döpte om klasserna och ändrade deras css.
        Jag skapade även en ny "base.html.twig" template fil som användes av mina projekt-relaterade template filer.
        På så vis fick jag till så att stilen ändrades när man klickade på länken till projektet.
        Jag gjorde även så att navbaren blev vertikal och låg till vänster på skärmen istället för att var horisontell vid toppen av skärmen.
    </p>

    <p>
        Jag valde att implementera projektet "Blackjack".
        Jag gjorde detta valet eftesom det gav mig en möjlighet att repetera de tekniker vi lärt oss under kursens gång,
        och eftersom jag tyckte att det var ett intressant projekt som inte var allt för stort. Mitt mål var att få med alla krav,
        eftersom krav 4 och krav 6 inte var speciellt krävande.
        Men jag hade dessvärre inte tid till det eftersom jag hade underskattat tiden det tog att få till ett helt fungerande Blackjack spel.
        Att hantera 1-3 spelare, och hålla koll på vems tur det är var var speciellt svårt. 
        Jag började med att lägga spelarna i en vanlig lista som jag sparade i sessionen för att hålla koll på dem.
        Men denna lösningen var jag inte nöjd med eftersom den var lite för enkel och ganska ful;
        för mycket logik hamnade i kontrollerna. 
    </p>
    <p>
        Jag bestämde mig för att skapa en länkad lista med noder som representerade spelarna.
        Jag valde denna lösningen eftersom den var lite mer avancerad än en vanlig lista,
        och eftersom det gav mig en dedikerad klass där jag kunde hålla koll på spelarna. 
        Att använda en länkad lista i detta sammanhanget var inte helt nödvändigt och kanske lite "overkill", 
        vilket jag var medveten om, men det var en lösning jag tyckte verkade intressant och jag ville repetera kunskap och tekniker från kursen "oopython". 
    </p>


    <h3>Allmänt stycke om hur projektet gick att genomföra.</h3>
    <p>
        Jag tycker att det är ett rimligt projekt för kursen. Det var ganska lätt att skriva koden,
        eftersom det var samma tekniker som vi använt tidigare i kursen, vilket var bra eftersom det gav oss möjligheten att repetera.
        Det svåra var just att få till ett "felfritt" projekt.
        Att registrera 1-3 spelare på Blackjack och att låta dem dra kort var inte speciellt svårt,
        men att hantera olika "edge cases" som att endast tillåta spelare att dra kort ifall de hade under 21 poäng,
        och att banken drog kort utifrån vad spelarna fått för poäng var desto svårare att få till. 
    </p>


    <h3>Avslutande stycke med mina tankar om kursen</h3>
    <p>
        Jag tycker att det var för många composer relaterade verktyg i kursen.
        Det blev till sist lite svårt att hålla isär dem och få en förståelse över deras syfte.
        Jag tycker även att det var för lite repetition av ORM för att verkligen lära sig det. 
        Jag tyckte om att arbeta enligt MVC design mönstret och att lära mig om kodkvalitet.
        Handledningen har varit bra och jag känner mig nöjd med kursen. 
    </p>
    <p>
        PHP har varit nytt för mig och att inte ha en etablerad kunskap gjorde att jag kände mig mer bekväm med att testa nya lösningar.
        Jag lärde mig mycket av detta. 
        Kursen får 7/10 i betyg av mig, det som drar ner den lite är just att det enligt mig var för många tekniker och verktyg.
        Jag kan definitivt rekommendera kursen till vänner/kollegor. 
    </p>


{% endblock %}
