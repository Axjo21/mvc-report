{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block main %}
    <h1>Report</h1>
    <h2>Använd länkarna för snabb navigering</h2>
    <nav class="nav-report">
        <li><a href="#kmom01">Kmom01</a></li>
        <li><a href="#kmom02">Kmom02</a></li>
        <li><a href="#kmom03">Kmom03</a></li>
        <li><a href="#kmom04">Kmom04</a></li>
        <li><a href="#kmom05">Kmom05</a></li>
        <li><a href="#kmom06">Kmom06</a></li>
        <li><a href="#kmom07">Kmom07</a></li>
        <li><a href="#kmom07/10">Kmom07/10</a></li>
    </nav>
    <h2><a id="kmom01">Kmom01</a></h2>
    <p> --Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</p>
    <p>Min enda förkunskap av objektorientering är från kursen "OO-Python" som jag läste tidigare i våras.
    Där jag lärde mig några av de mer klassiska formerna av Objektorienterad
    programmering. I oopy gick vi igenom saker som klasser, arv, metoder, privata/publika attribut med mera.
    Som jag förstår det så kommer MVC att fokusera på en liknande form av objektorienterad programmering. </p>

    <p> --Berätta kort om PHPs modell för klasser och objekt.
    Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</p>
    <p>Man behöver veta att ett objekt har properties(medlemsvariabler) och methods(metoder, (eller funktioner) som är kopplade till objekt).
        Medlemsvariablerna är allt som ett objekt behöver lagra. Metoderna är allt som objektet behöver kunna utföra.
        Man behöver vara medveten om medlemsvariablernas synlighet och på vilken nivå åtkomsten till dem är satt. Är en medlem privat så kan man inte 
        se eller ändra den utanför klassen, då behöver man skapa metoder som hanterar den funktionaliteten. Så kallade setters och getters. 
    </p>

    <p> --Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</p>
    <p>Det påminner mycket om hur det var att ge sig in i Design-kursens första kursmoment. Det är väldigt många filer att hålla reda på och det är mycket man inte skapat själv.
    Att komma rätt in bland filer man inte själv skapat är utmanande, och man får gissa sig fram till hur mycket av hur det hela hänger ihop.</p>

    <p> --Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla?
    Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</p>
    <p>Det mest värdefulla jag tog med mig från artikeln var huvudsakligen självaste artikelns syfte, att det är lätt att hitta felaktig information 
    på internet om best practices och att det är bra att lära sig rätt från början. På så sätt var det en intressant artikel, men det är inte en artikel
    som är väl lämpad för att lära ut PHP från grunden, då de kod-exempel de tog upp var något avancerade.
    Jag känner att jag inte har speciellt bra koll på Dependencies och tror att det vore bra om jag lärde mig lite mer om det. 
    Dependencies är kanske inte ett super spännande område men att lära sig hantera dem och göra de mer flexibla genom Dependency Injections
    låter roligt.
    </p>

    <p> --Vilken är din TIL för detta kmom?</p>
    <p>Jag lärde mig att PHP har en inbyggd web server som man kör genom "php -S ...".

    <h2><a id="kmom02">Kmom02</a></h2>

    <p> --Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</p>
    <p>
        Arv - Arv används dels för att återanvända kod och hålla klasser som har mycket gemensamt fri från boilerplate kod.
        En klass som ärver från en annan klass kallas för "subclass" och den andra klassen kallas för "basklass". Subklassen ärver samtliga metoder
        och medlemsvariabler från basklassen. Subklasserna kan lägga till funktionalitet eller ändra från den ärvda funktionaliteten utan att ändra
        på basklassen.<br>
        Komposition - Komposition är en annan form av relation mellan klasser. I komposition säger man att en klass "has-a" annan klass. Medans i arv
        säger man att en klass "is-a" annan klass. Det vill säga att i komposition så består en klass av andra klasser och de klasserna som finns med i
        "huvudklassen" kan inte existera utanför instansen av just den klassen. Till skillnad från aggregation, som är en annan typ av relation, som har mycket
        gemensamt med komposition, fast där klasserna inte är lika beroende på varandra.<br>
        Interface - Ett interface är en beskrivning av hur en klass bör implementeras, vilka metoder den bör ha med osv. Kan liknas med "abstract-klass".<br>
        Trait - Ett trait är en typ av metod som en klass kan extenda och använda sig av. Traits kan inte instansieras själva. 
    </p>
    <p> --Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</p>
    <p>
        Jag började med att studera övningen med "pig" spelet och testade själv på att skapa routes och anpassa pig-rutterna för att passa in på denna uppgiften. 
        Sedan funderade jag över hur jag skulle strukturera mina klasser och efter det så satte jag igång. Jag märkte snabbt att mycket av övningens krav kunde 
        uppfyllas genom att endast implementera DeckOfCards klassen och det var det jag gjorde till stor del. Mot slutet, när kraven redan var uppfyllda så fokuserade jag
        på att flytta över metoder och omstrukturera min kod för att implementera arv och komposition av de andra klasserna. 
        När det kommer till förbättringspotential så hade jag valt att skapa en komposition mellan DeckOfCards och Cards och jag hade även sparat kortleken sorterad på ett annat sätt. 
        Allt som allt är jag nöjd med min lösning av uppgiften och jag tycker att jag gjorde ett bra arbete, med tanke på att det var en stor uppgift och jag lade ner mycket tid på den. 
    </p>
    <p> --Vilka är dina refelktioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</p>
    <p>
        Jag tycker att det är väldigt smidigt att jobba i Symfony och att tillämpa en MVC-struktur på koden. Nackdelen med Symfony, samt liknande moduler är att
        man inte skriver koden själv, så det kan vara svårt att förstå vad den gör, hur den hänger ihop och varför det fungerar som det gör. 
    </p>
    <p> --Vilken är din TIL för detta kmom?</p>
    <p>Jag har lärt mig mycket om hur Controllers fungerar och jag har även blivit bättre på att använda Git, då jag fokuserade på att skapa många commits detta kmom.</p>


    <h2><a id="kmom03">Kmom03</a></h2>
    <p> 
        -- Berätta hur det kändes att modellera ett kortspel med flödesdiagram och pseudokod.
        Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?
    </p>
    <p>
        Att skapa flödesdiagram och pseudokod hjälpte mig väldigt mycket.
        Jag brukar anteckna mina tankar på papper men genom att ta hjälp av tekniker som dessa fick jag en mer strukturerad förståelse över problemet.
        Speciellt pseudokod är något som jag kommer dra nytta av i framtiden.
    </p>
    <p>
        Nackdelen är att det kan vara svårt att veta hur man ska gå till väga innan man börjat koda.
        Då är det kanske bättre att först skapa en väldigt simpel lösning som man sedan kan bygga vidare på efter att man kommit igång.
    </p>


    <p>
        -- Berätta om din implementation från uppgiften.
        Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden,
        dina klasser och applikationen som helhet?
    </p>
    <p>
        Jag är nöjd med min lösning.
        Jag funderade på att göra kontrollerna ännu "tunnare" och istället lägga mer kod i modellerna
        men det beslöt jag mig för att inte göra eftersom det inte handlade om endast ett fåtal rader kod och vore onödigt ansträngande.
        Dessa funderingar hade jag mot slutet av uppgiften då jag reflekterade över hur jag kunde förenkla kontrollerna.
        Jag hade löst det genom att skapa en Game klass som hanterade spelets flöde genom att anropa andra klasser och returnera färdig formatterad data.
        På så vis hade jag även förminskat if och else satser i vyerna, men som sagt,
        det hade blivit för komplicerat och vore enligt mig inte värt det endast för att bli av med ett fåtal session anrop i kontrollerna.
    </p>
    <p>
        I övrigt så byggde jag vidare på mina tidigare klasser och skapade även en ny klass, BankHand som bygger på CardHand klassen.
        BankHand har i uppgift att dra kort åt banken.
    </p>


    <p> --Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?</p>
    <p>
        Jag börjar känna mig mer och mer bekväm med Symfony men har ännu inte greppat det helt och hållet.
        Jag tycker att det funkar bra såhär långt för enklare applikationer,
        men det återstår att se hur det kommer att funka när vi börjar skapa mer avancerade program.
    </p>


    <p> --Vilken är din TIL för detta kmom?</p>
    <p>
        Speciellt kul detta kursmomentet var att lära sig pseudokod och flödesdiagram.
        Jag känner även att jag har en bättre förståelse för designmönstret MVC, vilket jag inte förstod så väl tidigare.
    </p>

    <h2><a id="kmom04">Kmom04</a></h2>
    <p></p>

    <h2><a id="kmom05">Kmom05</a></h2>
    <p></p>

    <h2><a id="kmom06">Kmom06</a></h2>
    <p></p>

    <h2><a id="kmom07/10">Kmom07/10</a></h2>
    <p></p>

{% endblock %}
